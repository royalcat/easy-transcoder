// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package elements

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/shirou/gopsutil/v4/cpu"
	"os/exec"
	"regexp"
	"strings"
	"sync/atomic"
	"time"
)

func Status(ffmpegBinary string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"status\" hx-get=\"/elements/status\" hx-trigger=\"load, every 3s\" hx-swap=\"outerHTML\"><div class=\"flex items-center space-x-4\"><div class=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(getFFmpegVersion(ffmpegBinary))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/elements/status.templ`, Line: 22, Col: 36}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><div class=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">CPU: ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.1f%%", getCPUUsage()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/elements/status.templ`, Line: 25, Col: 47}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func getFFmpegVersion(ffmpegBinary string) string {
	if ffmpegBinary == "" {
		return "FFmpeg: loading"
	}

	cmd := exec.Command(ffmpegBinary, "-version")
	output, err := cmd.Output()
	if err != nil {
		return "FFmpeg: unavailable"
	}

	// Extract version from the first line
	firstLine := strings.Split(string(output), "\n")[0]

	// Use regex to extract the version number
	re := regexp.MustCompile(`ffmpeg version\s+([\w\d\.-]+)`)
	matches := re.FindStringSubmatch(firstLine)

	if len(matches) >= 2 {
		return "FFmpeg: v" + matches[1]
	}

	return "FFmpeg installed"
}

var lastCPUCall atomic.Pointer[time.Time]

func getCPUUsage() float64 {
	vals, err := cpu.Percent(time.Second, false)
	if err != nil {
		return 0.0
	}
	return vals[0]
}

var _ = templruntime.GeneratedTemplate
