package elements

import (
	"time"

	"github.com/royalcat/easy-transcoder/internal/processor"
	"github.com/royalcat/easy-transcoder/templui/components/button"
	"github.com/royalcat/easy-transcoder/templui/components/icon"
	"github.com/royalcat/easy-transcoder/templui/components/label"
	"github.com/royalcat/easy-transcoder/templui/components/progress"
	"github.com/royalcat/easy-transcoder/templui/components/tooltip"
	"slices"
)

// TaskState represents the UI state of a task
type TaskState struct {
	// Core identification
	ID string

	// Input/Output configuration
	Preset    string
	FileName  string
	InputFile string
	TempFile  string

	// Status information
	Status   processor.TaskStatus
	Progress float64
	Error    string // Error message if task failed

	// Additional metadata
	CreatedAt time.Time
}

templ Queue(tasks []TaskState) {
	{{
		waitingTasks := []TaskState{}
		queuedTasks := []TaskState{}
		completedTasks := []TaskState{}
		otherTasks := []TaskState{}
		for _, task := range tasks {
			switch task.Status {
			case processor.TaskStatusWaitingForResolution, processor.TaskStatusReplacing:
				waitingTasks = append(waitingTasks, task)
			case processor.TaskStatusPending, processor.TaskStatusProcessing:
				queuedTasks = append(queuedTasks, task)
			case processor.TaskStatusCompleted, processor.TaskStatusCancelled, processor.TaskStatusFailed:
				completedTasks = append(completedTasks, task)
			default:
				otherTasks = append(otherTasks, task)
			}
		}

		slices.Reverse(waitingTasks)
		slices.Reverse(queuedTasks)
	}}
	if len(otherTasks) != 0 {
		// This should not normally happen
		@label.Label(label.Props{
			Class: "text-2xl font-bold mb-4",
		}) {
			Unknown status tasks (please report)
		}
		<div id="queue-grid" class="flex flex-row flex-wrap gap-6 w-full">
			for _, task := range otherTasks {
				@taskCard(task)
			}
		</div>
	}
	if len(waitingTasks) != 0 {
		@label.Label(label.Props{
			Class: "text-2xl font-bold mb-4",
		}) {
			Waiting for resolution
		}
		<div id="queue-grid" class="flex flex-row flex-wrap gap-6 w-full">
			for _, task := range waitingTasks {
				@taskCard(task)
			}
		</div>
	}
	if len(queuedTasks) != 0 {
		@label.Label(label.Props{
			Class: "text-2xl font-bold my-4",
		}) {
			Queue
		}
		<div id="queue-grid" class="flex flex-row flex-wrap gap-6 w-full">
			for _, task := range queuedTasks {
				@taskCard(task)
			}
		</div>
	}
	if len(completedTasks) != 0 {
		@label.Label(label.Props{
			Class: "text-2xl font-bold my-4",
		}) {
			Completed
		}
		<div id="queue-grid" class="flex flex-row flex-wrap gap-6 w-full">
			for _, task := range completedTasks {
				@taskCard(task)
			}
		</div>
	}
}

templ taskCard(task TaskState) {
	<div class="w-lg h-90 rounded-lg border text-card-foreground bg-card p-12 shadow-xs">
		<div class="flex flex-col gap-2 h-full w-full">
			<div class="flex flex-none">
				@label.Label(label.Props{
					Class: "text-lg font-semibold",
				}) {
					{ task.FileName }
				}
			</div>
			<div class="flex grow">
				<div class="flex flex-col w-full">
					<p class="text-sm text-muted-foreground">ID: { task.ID }</p>
					<p class="text-sm text-muted-foreground">Preset: { task.Preset }</p>
					if !task.CreatedAt.IsZero() {
						<p class="text-sm text-muted-foreground">Created: { task.CreatedAt.Format("Jan 02 15:04:05") }</p>
					}
					if task.Status == processor.TaskStatusFailed && task.Error != "" {
						<div class="mt-2 p-2 bg-destructive/10 border border-destructive rounded-md">
							<p class="text-sm text-destructive font-medium">Error: { task.Error }</p>
						</div>
					}
				</div>
			</div>
			<div class="flex-none w-full">
				switch task.Status {
					case processor.TaskStatusPending:
						<div class="flex flex-row-reverse">
							@button.Button(button.Props{
								Variant: button.VariantDestructive,
								Attributes: templ.Attributes{
									"hx-post": "/submit/cancel",
									"hx-vals": `{"taskid": "` + task.ID + `"}`,
									"hx-swap": "none",
								},
							}) {
								Cancel
							}
						</div>
					case processor.TaskStatusWaitingForResolution:
						<div class="flex flex-row-reverse">
							@button.Button(button.Props{
								Variant: button.VariantDefault,
								Href:    "/resolver?taskid=" + task.ID,
							}) {
								Resolve
							}
						</div>
					case processor.TaskStatusProcessing:
						<div class="flex flex-col gap-2">
							@progress.Progress(progress.Props{
								Value:     int(task.Progress * 100),
								Max:       100,
								Variant:   progress.VariantSuccess,
								ShowValue: true,
								Label:     "Processing",
							})
							<div class="flex justify-end">
								@tooltip.Tooltip() {
									@tooltip.Trigger() {
										@button.Button(button.Props{
											Variant: button.VariantDestructive,
											Size:    button.SizeIcon,
											Attributes: templ.Attributes{
												"hx-post": "/submit/cancel",
												"hx-vals": `{"taskid": "` + task.ID + `"}`,
												"hx-swap": "none",
											},
										}) {
											@icon.X()
										}
									}
									@tooltip.Content() {
										Cancel
									}
								}
							</div>
						</div>
					case processor.TaskStatusCancelled:
						<div class="flex flex-row-reverse">
							@label.Label(label.Props{
								Class: "text-lg font-semibold text-destructive",
							}) {
								Cancelled
							}
						</div>
					case processor.TaskStatusCompleted:
						<div class="flex flex-row-reverse">
							@label.Label(label.Props{
								Class: "text-lg font-semibold text-success",
							}) {
								Completed
							}
						</div>
					case processor.TaskStatusFailed:
						<div class="flex flex-row-reverse">
							@label.Label(label.Props{
								Class: "text-lg font-semibold text-destructive",
							}) {
								Failed
							}
						</div>
					case processor.TaskStatusReplacing:
						<div class="flex flex-row-reverse">
							@label.Label(label.Props{
								Class: "text-lg font-semibold",
							}) {
								Replacing
							}
						</div>
					default:
						<div class="flex flex-row-reverse">
							@label.Label(label.Props{
								Class: "text-lg font-semibold",
							}) {
								Unknown status: { string(task.Status) }
							}
						</div>
				}
			</div>
		</div>
	</div>
}
