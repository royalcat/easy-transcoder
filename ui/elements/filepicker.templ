package elements

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/input"
	"github.com/axzilla/templui/icon"
	"github.com/dustin/go-humanize"
	"net/url"
	"os"
	"path"
	"sort"
	"strings"
)

// isVideoFile checks if a file has a video extension
func isVideoFile(name string) bool {
	videoExtensions := []string{
		".mp4", ".mkv", ".avi", ".mov", ".wmv", ".flv", ".webm", ".m4v", ".3gp", ".ts", ".mpg", ".mpeg",
	}

	ext := strings.ToLower(path.Ext(name))
	for _, videoExt := range videoExtensions {
		if ext == videoExt {
			return true
		}
	}
	return false
}

// FileEntry represents a file with its info for sorting
type FileEntry struct {
	Name      string
	Path      string
	IsDir     bool
	Size      int64
	ModTime   string
	InQueue   bool
	QueueInfo string
}

// isFileInQueue checks if a file path exists in the task queue and returns its status if found
func isFileInQueue(filePath string, queue []TaskState) (bool, string) {
	for _, task := range queue {
		if task.InputFile == filePath {
			return true, string(task.Status)
		}
	}
	return false, ""
}

templ FilePicker(p string, sortOption string, queue []TaskState) {
	<div id="filepicker">
		{{
			info, err := os.Stat(p)
			if err != nil {
				return err
			}
		}}
		<div class="flex flex-col gap-4">
			<div class="flex flex-row gap-2">
				@button.Button(button.Props{
					Size:     button.SizeIcon,
					Variant:  button.VariantGhost,
					Class:    "flex",
					HxGet:    "/elements/filepicker?path=" + url.QueryEscape(path.Dir(p)) + "&sort=" + url.QueryEscape(sortOption),
					HxTarget: "#filepicker",
					HxSwap:   "outerHTML",
				}) {
					@icon.ArrowLeft()
				}
				@input.Input(input.Props{
					ID:          "filepath",
					Type:        "text",
					Name:        "filepath",
					Class:       "flex",
					Placeholder: "Enter file path",
					Value:       p,
					Required:    true,
				})
			</div>
			<div class="text-sm text-muted-foreground px-1">
				Showing only video files and directories
			</div>
			<div class="h-96 overflow-auto">
				if info.IsDir() {
					@filelist(p, sortOption, queue)
				} else {
					@FileInfo(p)
				}
			</div>
		</div>
	</div>
}

templ filelist(p string, sortOption string, queue []TaskState) {
	{{
		files, err := os.ReadDir(p)
		if err != nil {
			return err
		}

		// Collect file entries for sorting
		var fileEntries []FileEntry
		var dirEntries []FileEntry

		for _, file := range files {
			isDir := file.IsDir()
			showFile := isDir || isVideoFile(file.Name())

			if showFile {
				info, err := file.Info()
				if err != nil {
					continue
				}

				filePath := path.Join(p, file.Name())
				inQueue, queueStatus := isFileInQueue(filePath, queue)

				entry := FileEntry{
					Name:      file.Name(),
					Path:      filePath,
					IsDir:     isDir,
					Size:      info.Size(),
					ModTime:   info.ModTime().Format("2006-01-02 15:04:05"),
					InQueue:   inQueue,
					QueueInfo: queueStatus,
				}

				if isDir {
					dirEntries = append(dirEntries, entry)
				} else {
					fileEntries = append(fileEntries, entry)
				}
			}
		}

		// Sort directories and files based on option
		switch sortOption {
		case "size_desc":
			sort.Slice(fileEntries, func(i, j int) bool {
				return fileEntries[i].Size > fileEntries[j].Size
			})
		case "size_asc":
			sort.Slice(fileEntries, func(i, j int) bool {
				return fileEntries[i].Size < fileEntries[j].Size
			})
		case "name_desc":
			sort.Slice(dirEntries, func(i, j int) bool {
				return dirEntries[i].Name > dirEntries[j].Name
			})
			sort.Slice(fileEntries, func(i, j int) bool {
				return fileEntries[i].Name > fileEntries[j].Name
			})
		default: // name_asc
			sort.Slice(dirEntries, func(i, j int) bool {
				return dirEntries[i].Name < dirEntries[j].Name
			})
			sort.Slice(fileEntries, func(i, j int) bool {
				return fileEntries[i].Name < fileEntries[j].Name
			})
		}

		// Combine directories and files
		allEntries := append(dirEntries, fileEntries...)
	}}
	<div class="flex justify-between items-center mb-3">
		<div class="text-sm font-medium">Sort by:</div>
		<div class="flex space-x-2">
			{{
				nameAscVariant := button.VariantGhost
				if sortOption == "name_asc" {
					nameAscVariant = button.VariantSecondary
				}
			}}
			@button.Button(button.Props{
				Variant:  nameAscVariant,
				HxGet:    "/elements/filepicker?path=" + url.QueryEscape(p) + "&sort=name_asc",
				HxTarget: "#filepicker",
				HxSwap:   "outerHTML",
			}) {
				Name ↑
			}
			{{
				nameDescVariant := button.VariantGhost
				if sortOption == "name_desc" {
					nameDescVariant = button.VariantSecondary
				}
			}}
			@button.Button(button.Props{
				Variant:  nameDescVariant,
				HxGet:    "/elements/filepicker?path=" + url.QueryEscape(p) + "&sort=name_desc",
				HxTarget: "#filepicker",
				HxSwap:   "outerHTML",
			}) {
				Name ↓
			}
			{{
					sizeAscVariant := button.VariantGhost
					if sortOption == "size_asc" {
						sizeAscVariant = button.VariantSecondary
					}
			}}
			@button.Button(button.Props{
				Variant:  sizeAscVariant,
				HxGet:    "/elements/filepicker?path=" + url.QueryEscape(p) + "&sort=size_asc",
				HxTarget: "#filepicker",
				HxSwap:   "outerHTML",
			}) {
				Size ↑
			}
			{{
			sizeDescVariant := button.VariantGhost
			if sortOption == "size_desc" {
				sizeDescVariant = button.VariantSecondary
			}
			}}
			@button.Button(button.Props{
				Variant:  sizeDescVariant,
				HxGet:    "/elements/filepicker?path=" + url.QueryEscape(p) + "&sort=size_desc",
				HxTarget: "#filepicker",
				HxSwap:   "outerHTML",
			}) {
				Size ↓
			}
		</div>
	</div>
	<ul class="flex flex-col gap-3">
		for _, entry := range allEntries {
			{{
				urlpath := url.QueryEscape(entry.Path)
			}}
			if entry.IsDir {
				<a hx-get={ "/elements/filepicker?path=" + urlpath + "&sort=" + url.QueryEscape(sortOption) } hx-target="#filepicker" hx-swap="outerHTML">
					<li class="flex justify-between items-center group">
						<div class="flex items-center gap-2">
							@icon.Folder()
							<div class="flex hover:underline">{ entry.Name }</div>
						</div>
						<div class="text-sm text-muted-foreground">
							Directory
						</div>
					</li>
				</a>
			} else {
				<a hx-get={ "/elements/filepicker?path=" + urlpath + "&sort=" + url.QueryEscape(sortOption) } hx-target="#filepicker" hx-swap="outerHTML">
					<li class="flex justify-between items-center group">
						<div class="flex items-center gap-2">
							@icon.File()
							if entry.InQueue {
								<div class="ml-2 text-xs px-2 py-0.5 rounded-full bg-primary/20 text-primary">
									{ entry.QueueInfo }
								</div>
							}
							<div class="flex hover:underline">{ entry.Name }</div>
						</div>
						<div class="text-sm text-muted-foreground">
							{ humanize.Bytes(uint64(entry.Size)) }
						</div>
					</li>
				</a>
			}
		}
	</ul>
}
